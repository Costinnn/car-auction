datasource db {
  url      = env("DATABASE_URL")
  provider = "mongodb"
}

generator client {
  provider = "prisma-client-js"
}

// authentication
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// own models
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String    @unique
  image          String?
  bio            String    @default("No bio info.")
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String
  createdAt      DateTime  @default(now())
  accounts       Account[]
  sessions       Session[]

  bids          Bid[]
  ownedListings Carpost[] @relation("ownCarpost")

  savedListingsIds String[]  @db.ObjectId
  savedListings    Carpost[] @relation("savedCarpost", fields: [savedListingsIds], references: [id])

  biddedListingsIds String[]  @db.ObjectId
  biddedListings    Carpost[] @relation("biddedCarpost", fields: [biddedListingsIds], references: [id])

  weeklyEmail   Boolean        @default(true)
  outbidEmail   Boolean        @default(true)

  newListingsNotify Boolean        @default(true)
  outbidNotify   Boolean        @default(true)
  endingNotify     Boolean        @default(true)
  favResultsNotify Boolean        @default(true)
  bidResultsNotify Boolean        @default(true)
  notifications Notification[]
}

model Carpost {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  phone               String
  extImages           String[]
  intImages           String[]
  title               String
  brand               String
  model               String
  vin                 String
  year                String
  mileage             String
  transmission        String
  gears               String
  drivetrain          String
  engineCapacity      String
  engineCylinders     String
  engineConfiguration String
  category            String
  eColor              String
  iColor              String
  location            String
  description         String
  modifications       String[]
  flaws               String[]

  buyNow     Int?  @default(0)
  minimumBid Int   @default(0)
  bids       Bid[] @relation("bids")
  bidValue   Int?
  views      Int?  @default(0)

  sellerId String @db.ObjectId
  seller   User   @relation("ownCarpost", fields: [sellerId], references: [id])

  savedByUsers String[] @db.ObjectId
  savedBy      User[]   @relation("savedCarpost", fields: [savedByUsers], references: [id])

  biddedByUsers String[] @db.ObjectId
  biddedBy      User[]   @relation("biddedCarpost", fields: [biddedByUsers], references: [id])

  expiresAt     DateTime
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model Bid {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bidValue  Int
  createdAt DateTime @default(now())

  isCurrentBid Boolean @default(true)

  bidderId String @db.ObjectId
  bidder   User   @relation(fields: [bidderId], references: [id])

  carPostId String  @db.ObjectId
  carPost   Carpost @relation("bids", fields: [carPostId], references: [id])
}

model Notification {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  link      String
  message   String
  isSeen    Boolean @default(false)
  extraInfo String?

  carPostId String  @db.ObjectId
  carPost   Carpost @relation(fields: [carPostId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}
